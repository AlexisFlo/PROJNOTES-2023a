// Importing the winston core
// and the format function from winston
import winston, { format } from 'winston';

// Funtions are destructured to compose the format
const { combine, timestamp, label, printf, colorize } = format;

// A color scheme is defined
// according to the severity level
const colors = {
  error: 'red',
  warn: 'yellow',
  info: 'green',
  http: 'magenta',
  debug: 'blue',
};

// Adding the color scheme to Winston
winston.addColors(colors);

// ==== Creating templates for the formats ====

// Format for the console
const myConsoleFormat = combine(
  // Adding colors to the format
  colorize({ all: true }),
  // Adding a label to the log
  label({ label: 'ðŸ“£' }),
  // Adding date
  timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }),
  // Printing function
  printf(
    (info) => `${info.level}: ${info.label}: ${info.timestamp}: ${info.message}`
  )
);

// Format for files
const myFileFormat = combine(
  // Removing any type of coloring
  format.uncolorize(),
  // Adding date
  timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }),
  // Setting output to JSON format
  format.json()
);

// Creating the options object for each transport
const options = {
  infoFile: {
    level: 'info',
    filename: `${__rootdir}/server/logs/info.log`,
    handleExceptions: false,
    maxSize: 5242880, // 5MB
    maxFiles: 5,
    format: myFileFormat,
  },
  warnFile: {
    level: 'info',
    filename: `${__rootdir}/server/logs/warn.log`,
    handleExceptions: false,
    maxSize: 5242880, // 5MB
    maxFiles: 5,
    format: myFileFormat,
  },
  errorFile: {
    level: 'error',
    filename: `${__rootdir}/server/logs/error.logs`,
    handleExceptions: false,
    maxSize: 5242880, // 5MB
    maxFiles: 5,
    format: myFileFormat,
  },
  console: {
    level: 'debug',
    handleExceptions: true,
    format: myConsoleFormat,
  },
};

// Creating logger instance
const logger = winston.createLogger({
  transports: [
    new winston.transports.File(options.infoFile),
    new winston.transports.File(options.warnFile),
    new winston.transports.File(options.errorFile),
    new winston.transports.Console(options.console),
  ],
  exitOnError: false, // Does not exit on unhandled exceptions
});

/*
By default, Morgan sends the output exclusively to the console, like this:
 Morgan --->[logs]---> console
What we will do next is define a function called "write" that will be part of an object that will
be assigned to the logger's stram property. This function will be able to receive the output
generated by Morgan "message" and redirect it to winston as informational.
We will use the informational level so thatt both the file transporter and the console take it
Morgan --->[logs]---> Winston ---> [Logs to informational transports]
*/

// Setting up an input stream that will serve
// to intercept the morgan log
logger.stream = {
  write(message) {
    logger.info(message);
  },
};

// Finally, we export the logger
export default logger;
